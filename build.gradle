repositories {
    mavenLocal()
    mavenCentral()
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven-publish'

// RELEASE FLAG
def release = false

group = 'com.wedeploy'
version = '1.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile "redis.clients:jedis:2.9.0"
    testCompile "junit:junit:4.12"
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}
javadoc {
    failOnError = false
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (project.hasProperty("wedeployRepo")) {
    model {
        tasks.publishJarPublicationToMavenRepository {
            enabled = !release
        }
    }
}


model {
    tasks.publishJarPublicationToSonatypeRepository {
        if (release)
            dependsOn(project.tasks.signArchives)
        enabled = release
    }
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

if (release) {
    signing {
        sign configurations.archives
    }
}

publishing {
    publications {
        jar(MavenPublication) {
            customizePom(pom, rootProject)
            from components.java

            artifact sourceJar
            artifact javadocJar

            if (release) {
                // sign the pom
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                    pomFile.delete()
                }

                // sign the artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
        if (project.hasProperty("wedeployRepo")) {
            maven {
                url wedeployRepo
                credentials {
                    username wedeployRepoUsername
                    password wedeployRepoPassword
                }
            }
        }
        maven {
            name 'sonatype'
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            if (release) {
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }
}

task install(dependsOn: publishToMavenLocal) {
    group = 'Publishing'
    description = 'Installs artifacts to local Maven repository'
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}

task setUpRedis {
    doLast {
        exec {
            executable "docker"
            args "run", "-p", "6379:6379", "-d", "--name", "redis", "redis:latest"
        }
    }
}

task tearDownRedis {
    doLast {
        exec {
            executable "docker"
            args "rm", "-f", "-v", "redis"
        }
    }
}


def customizePom(pom, gradleProject) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            name 'Redis Simple Message Queue'
            description 'A lightweight message queue for Java that requires no dedicated queue server.'
            url 'https://github.com/wedeploy/jrsmq'
            organization {
                name 'WeDeploy'
                url 'http://wedeploy.com'
            }
            licenses {
                license {
                    name 'The New BSD License'
                }
            }
            scm {
                url 'https://github.com/wedeploy/api-java'
            }
            developers {
                developer {
                    id 'Igor'
                    name 'Igor SpasiÄ‡'
                    email 'igor.spasic@liferay.com'
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.4'
}